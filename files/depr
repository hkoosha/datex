    $calendar = _datex_field_calendar($element);
    if (!$calendar) {
      return;
    }

    dargs();
    return;

    $date = array();
    foreach ($element['#granularity'] as $granule) {
      $date[$granule] = $element[$granule]['#value'];
      if (empty($date[$granule])) {
        // Date module will itself invalidate the field.
        return;
      }
    }

    $calendar->setDateLocal(
      $date['year'],
      isset($date['month']) ? $date['month'] : 0,
      isset($date['day']) ? $date['day'] : 0
    );

    $calendar->setTime(
      isset($date['hour']) ? $date['hour'] : 12,
      isset($date['minute']) ? $date['minute'] : 0,
      isset($date['second']) ? $date['second'] : 0
    );
    // $calendar->fixGranularities($element['#granularity']);
    $nf = array('year' => 'Y', 'month' => 'n', 'day' => 'j');
    foreach ($nf as $name => $format) {
      if (isset($element['#value'][$name])) {
        $value = $calendar->xFormat($format);
        $element['#value'][$name] = $value;
        $element[$name]['#value'] = $value;
      }
    }

    form_set_value($element, $element['#value'], $form_state);
    drupal_array_set_nested_value($form_state['input'],
      $element['#parents'],
      $element['#value'],
      TRUE);
  }




  // ------------------


    if (!is_array($element['#value'])) {
      $value = _datex_date_convert($element['#value']);
      if ($value) {
        form_set_value($element, $value, $form_state);
      }
      else {
        form_set_error($element['#name'], t('You have to specify a valid date.'));
      }
      return;
    }









      case 'date':
      case 'text':
        // if not views?
        $field_real_value =
          drupal_array_get_nested_value($form_state['input'], $value_path, $input_exists);
        break;



// ----------------------------------------------

/**
 * Does not work when localized.
 *
 * @param $date
 * @param $format
 * @param $default
 *
 * @return array
 */
function _datex_parse($date, $format, $default) {
  $format = preg_quote($format);
  $pattern = preg_replace('#([a-zA-Z])#', '(?<$1>\d+)', $format);
  $pattern = '#' . $pattern . '#';
  $m = [];
  $d = [
    'year' => NULL,
    'month' => NULL,
    'day' => NULL,
    'hour' => NULL,
    'minute' => NULL,
    'second' => NULL,
  ];
  $d = array_merge($d, $default);

  $parts = [
    'year' => ['o', 'Y'],
    'month' => ['m', 'n'],
    'day' => ['d', 'j'],
    'hour' => ['G', 'H'],
    'minute' => ['i'],
    'second' => ['s'],
    'ampm' => ['a', 'A'],
  ];

  if (preg_match_all($pattern, $date, $m)) {
    foreach ($parts as $granule => $part) {
      foreach ($part as $format_letter) {
        if (isset($m[$format_letter][0])) {
          $d[$granule] = $m[$format_letter][0];
          break;
        }
      }
    }
    //    if (isset($m['d'][0])) {
    //      $d['day'] = intval($m['d'][0], 10);
    //    }
    //    elseif(isset($m['j'][0])) {
    //      $d['day'] = intval($m['j'][0], 10);
    //    }
    //
    //    $d['year'] = isset($m['Y'][0]) ? $m['Y'][0] : NULL;
    //    $d['month'] = isset($m['m'][0]) ? $m['m'][0] : NULL;
    //    $d['hour'] = isset($m['H'][0]) ? $m['H'][0] : NULL;
    //    $d['minute'] = isset($m['i'][0]) ? $m['i'][0] : NULL;
    //    $d['second'] = isset($m['s'][0]) ? $m['s'][0] : NULL;
  }

  return $d;
}


 // __________________________________________________________________________________________

function _datex_checks(&$form, $who, $boxes) {
  foreach ($boxes as $box) {
    $f[$who][$box] = [
      '#type' => 'checkbox',
      '#title' => $box,
    ];
  }
}

function _datex_selects(&$form, $who, $boxes) {
  foreach ($boxes as $box => $options) {
    $f[$who][$box] = [
      '#title' => $box,
      '#type' => 'select',
      '#options' => drupal_map_assoc($options),
    ];
  }
}

function _datex_texts(&$form, $who, $boxes) {
  foreach ($boxes as $box) {
    $f[$who][$box] = [
      '#type' => 'textfield',
      '#title' => $box,
    ];
  }
}

function _datex_fieldset(&$form, $title) {
  $f[$title] = [
    '#type' => 'fieldset',
    '#title' => explode('_', $title)[0],
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];
}


/**
 * Do not translate anything here, as the original documentation is not.
 */
function datex_popup_admin_form($f, $fs) {
  $targ = ['@url' => url('https://babakhani.github.io/PersianWebToolkit/doc/datepicker/playground.html')];
  $f['popup_description'] = [
    '#type' => 'markup',
    '#markup' =>
      '<br><h2>' .
      t('JS popup default configurations') .
      ' ' .
      t('visit <a href="@url">Play Ground</a> to get an idea of how these options work.', $targ) .
      '</h2><br>',
  ];

  // -----------------------------------------------

  $w = 'general_fieldset';
  _datex_fieldset($f, $w);

  $boxes = [
    'inline',
    'responsive',
    'autoClose',
    'onlySelectOnDate',
    'observer',
  ];
  _datex_checks($f, $w, $boxes);

  $boxes = [
    'viewMode' => ['day', 'month', 'year'],
  ];
  _datex_selects($f, $w, $boxes);

  $boxes = [
    'format',
    'altFormat',
    'minDate',
    'maxDate',
    'inputDelay',
  ];
  _datex_checks($f, $w, $boxes);

  // -----------------------------------------------

  $w = 'calendar_fieldset';
  _datex_fieldset($f, $w);

  $boxes = [
    'persianShowHint' => ['fa', 'en'],
    'gregorianShowHint' => ['fa', 'en'],
    'persianLeapYear' => ['algorithmic', 'astronomical'],
  ];
  _datex_selects($f, $w, $boxes);

  // -----------------------------------------------

  $w = 'picker_fieldset';
  _datex_fieldset($f, $w);

  $boxes = [
    'yearPicker',
    'monthPicker',
    'dayPicker',
  ];
  _datex_checks($f, $w, $boxes);

  $boxes = [
    'yearPickerTitleFormat',
    'monthPickerTitleFormat',
    'dayPickerTitleFormat',
  ];
  _datex_texts($f, $w, $boxes);

  $boxes = [
    'onlyTimePicker',
    'timePicker',
    'timePickerHour',
    'timePickerMinute',
    'timePickerSecond',
  ];
  _datex_checks($f, $w, $boxes);

  $boxes = [
    'timePickerHourStep',
    'timePickerMinuteStep',
    'timePickerSecondStep',
  ];
  _datex_texts($f, $w, $boxes);

  $boxes = [
    'timePickerMeridian',
  ];
  _datex_checks($f, $w, $boxes);

  $boxes = [
    'timePickerStep',
  ];
  _datex_texts($f, $w, $boxes);

  // -----------------------------------------------

  $w = 'picker_navigator';
  _datex_fieldset($f, $w);

  $boxes = [
    'navigatorEnabled',
    'navigatorScrollEnabled',
  ];
  _datex_checks($f, $w, $boxes);

  $boxes = [
    'nextButtonText',
    'previousButtonText',
  ];
  _datex_texts($f, $w, $boxes);

  // -----------------------------------------------

  $w = 'picker_toolbox';
  _datex_fieldset($f, $w);

  $boxes = [
    'toolboxEnabled',
    'todayButtonEnabled',
  ];
  _datex_checks($f, $w, $boxes);

  $boxes = [
    'todayButtonFaText',
    'todayButtonEnText',
  ];
  _datex_texts($f, $w, $boxes);

  $boxes = [
    'submitButtonEnabled',
  ];
  _datex_checks($f, $w, $boxes);

  $boxes = [
    'submitButtonFaText',
    'submitButtonEnText',
  ];
  _datex_texts($f, $w, $boxes);

  $boxes = [
    'enableCalendarSwitch',
  ];
  _datex_checks($f, $w, $boxes);

  $boxes = [
    'calendarSwitchTextFormatString',
  ];
  _datex_texts($f, $w, $boxes);

  $f['actions']['submit'] = [
    '#type' => 'submit',
    '#submit' => ['_datex_popup_admin_form_submit'],
    '#value' => t('Save'),
    '#name' => 'config',
  ];
  return $f;
}

function _datex_popup_admin_form_submit($f, &$fs) {
  $v = $form_state['values'];
  drupal_set_message(t('Configuration saved.'));
}

