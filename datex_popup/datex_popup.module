<?php

function _datex_add_lib_cal() {
  static $self_loaded = FALSE;
  if (!$self_loaded) {
    $self_loaded = TRUE;
    $datex_module_path = drupal_get_path('module', 'datex_popup');
    $min = variable_get('datex_popup_js_min', TRUE) ? '.min' : '';

    drupal_add_js($datex_module_path . '/asset/datex.js');
    drupal_add_js($datex_module_path . "/asset/PersianDate/dist/persian-date$min.js");
    drupal_add_js($datex_module_path . "/asset/pwt.datepicker/dist/js/persian-datepicker$min.js");

    drupal_add_css($datex_module_path . "/asset/pwt.datepicker/dist/css/persian-datepicker$min.css");
    $theme = variable_get('datex_pop_js_theme', 'blue');
    if ($theme) {
      drupal_add_css($datex_module_path . "/asset/pwt.datepicker/dist/css/theme/persian-datepicker-$theme$min.css");
    }
  }
}

/**
 * Implements hook_js_alter().
 *
 * Whenever date_popup.js is loaded, Remove it and inject datex library.
 */
function datex_popup_js_alter(&$js) {
  if (_datex_is_disabled('js')) {
    return;
  }

  foreach (array_keys($js) as $each) {
    foreach ([
               'locale.datepicker.js',
               'date_popup.js',
               'jquery.ui.datepicker.min.js',
               'timeentry',
               'timepicker',
             ] as $unset) {
      if (strpos($each, $unset) !== FALSE) {
        unset($js[$each]);
        // instead use ours
        _datex_add_lib_cal();
      }
    }
  }
}

/**
 * Implements hook_css_alter().
 */
function datex_popup_css_alter(&$css) {
  if (_datex_is_disabled('js')) {
    return;
  }

  foreach (array_keys($css) as $each) {
    foreach ([
               'jquery.ui.datepicker.css',
               'date_popup',
               'timeentry',
               'timepicker',
             ] as $unset) {
      if (strpos($each, $unset) !== FALSE) {
        unset($css[$each]);
        // instead use ours
        _datex_add_lib_cal();
      }
    }
  }
}

// ----------------------------------------------------------------------------

function _datex_popupify(&$element, DatexInterface $calendar, $date_format, $hidden_value) {
  if (_datex_is_disabled('popup')) {
    return NULL;
  }

  $schema = _datex_date_field_schema($element);
  $d = date_default_date($element);
  if ($d) {
    $calendar->setTimestamp($d->getTimestamp());
  }
  $def = $calendar->format('Y-n-j');

  list($from, $to) = date_range_years($element['#date_year_range']);
  $calendar->xSetDate($from, 1, 1);
  $from = $calendar->format('Y-n-j');
  $calendar->xSetDate($to, 1, 1);
  $to = $calendar->format('Y-n-j');

  $replace = [
    'd' => 'dd',
    'j' => 'd',
    'l' => 'DD',
    'D' => 'D',
    'm' => 'mm',
    'n' => 'm',
    'F' => 'MM',
    'M' => 'M',
    'Y' => 'yyyy',
    'y' => 'yy',
  ];
  $date_format = strtr($date_format, $replace);

  $s['def'] = $def;

  $p = array_values($element['#parents']);
  $p[] = 'datex_hidden';
  $element['datex_hidden'] = [
    '#type' => 'hidden',
    '#value' => $hidden_value,
    '#parents' => $p,
    '#attributes' => ['data-datex-findme' => $element['date']['#id']],
  ];
  foreach ($s as $name => $item) {
    $element['datex_hidden']['#attributes']['data-datex-' . $name][] = $item;
  }
}

function _datex_popup_set_hidden_date_on_calendar(DatexInterface $calendar, $hval, $g) {
  // Year-Month-Day
  $parts = explode('-', $hval);
  if (!in_array('month', $g)) {
    // Month 2 as placeholder (for dates without month granularity) is safer
    // than 1, when converting back and forth to Gregorian rounding errors
    // wont cause the year to go back one year accidentally.
    $parts[1] = 2;
  }
  if (!in_array('day', $g)) {
    // Month 2 as placeholder (for dates without month granularity) is safer
    // than 1, when converting back and forth to Gregorian rounding errors
    // wont cause the year to go back one year accidentally.
    $parts[2] = 2;
  }

  try {
    $calendar->setDateLocale($parts[0], $parts[1], $parts[2]);
  } catch (Exception $e) {
    return FALSE;
  }
  _datex_fix_missing_granularity_locale($calendar, $g);
  return TRUE;
}

function _datex_popup_date_field_element_validate_callback(&$element, &$fs) {
  if (date_hidden_element($element) || is_string($element['#value'])) {
    return;
  }

  $calendar = _datex_date_field_calendar($element);
  if (!$calendar) {
    return;
  }

  $dval = _datex_get_fs($element, $fs, 'date');
  $hval = _datex_get_fs($element, $fs, 'datex_hidden');

  if (empty($dval)) {
    // User has cleared date fields value, so clear datex_hidden too.
    _datex_set_fs($element, $fs, '', 'datex_hidden', TRUE);
    _datex_set_fs($element, $fs, '', 'datex_hidden', FALSE);
    return;
  }
  elseif (empty($hval)) {
    // When we have date value, we MUST have datex_hidden value too.
    form_set_error($element['#name'], t('You have to specify a valid date.'));
    return;
  }

  $def = date_default_date($element);
  $date_fmt = date_popup_date_format($element);
  $g = date_popup_date_granularity($element);
  _datex_fix_missing_granularity($def, $g, $calendar->getLocaleName());

  if (!_datex_popup_set_hidden_date_on_calendar($calendar, $hval, $g)) {
    form_set_error($element['#name'], t('Invalid date'));
    return;
  }

  $v = $calendar->xFormat($date_fmt);
  _datex_set_fs($element, $fs, $v, 'date', TRUE);
  _datex_set_fs($element, $fs, $v, 'date', FALSE);
}

/**
 * Implements hook_date_popup_process_alter().
 */
function datex_popup_date_popup_process_alter(&$element, &$form_state, $context) {
  if (_datex_is_disabled('popup')) {
    return;
  }

  $calendar = _datex_date_field_calendar($element, TRUE);
  if (!$calendar) {
    return NULL;
  }

  dpm($element);

  $date_fmt = date_popup_date_format($element);
  $time_fmt = date_popup_time_format($element);
  $def = date_default_date($element);
  $input = _datex_get_fs($element, $form_state);
  $g = date_popup_date_granularity($element);
  $hidden_value = '';

  _datex_fix_missing_granularity($def, $g, $calendar->getLocaleName());

  if (!empty($element['date']['#default_value'])) {
    $calendar->setTimestamp($def->getTimestamp());
    $element['date']['#default_value'] = $calendar->format($date_fmt);
    $hidden_value = $calendar->format(DATEX_HIDDEN_VALUE_FMT);
  }

  if ($input && !empty($input['datex_hidden']) && !empty($element['date']['#value'])) {
    if (!_datex_popup_set_hidden_date_on_calendar($calendar, $input['datex_hidden'], $g)) {
      form_set_error($element['#name'], t('Invalid date'));
      return;
    }
    $element['date']['#value'] = $calendar->format($date_fmt);
    $hidden_value = $input['datex_hidden'];
  }
  elseif (!empty($element['date']['#value'])) {
    if ($def) {
      $calendar->setTimestamp($def->getTimestamp());
      $element['date']['#value'] = $calendar->format($date_fmt);
      $hidden_value = $calendar->format(DATEX_HIDDEN_VALUE_FMT);
    }
    else {
      $element['date']['#value'] = '';
    }
  }

  _datex_popupify(
    $element,
    $calendar,
    date_part_format('date', $element['#date_format']),
    $hidden_value);
}
